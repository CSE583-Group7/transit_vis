import folium
import os
import pandas as pd


def write_census_data_to_csv(s0801_path, s1902_path, tract_shapes_path):
    """Writes the data downloaded directly from ACS to TIGER shapefiles.

    Reads in data from .csv format as downloaded from the American Community
    Survey (ACS) website, then filters to variables of interest and saves. In
    this case the two tables are s0801 and s1902, which contain basic
    socioeconomic and commute-related variables. Data was downloaded at the
    census tract level for the state of Washington. The data is saved in .csv
    format to be used in the Folium map.
    
    Args:
        s0801_path: A string path to the location of the raw s0801 data, not
            including file type ending (.csv).
        s1902_path: A string path to the location of the raw s1902 data, not
            including file type ending (.csv).
        tract_shapes_path: A string path to the geojson TIGER shapefile as
            downloaded from the ACS, containing polygon data for census tracts
            in the state of Washington.

    Returns:
        1 after writing the combined datasets to a *_tmp file in the same folder
        as the TIGER shapefiles.
    """
    # Read in the two tables that were taken from the ACS data portal website
    s0801_df = pd.read_csv(f"{s0801_path}.csv")
    s1902_df = pd.read_csv(f"{s1902_path}.csv")
    # Filter each table to only variables of interest, make more descriptive
    commuters_df = s0801_df[['GEO_ID', 'NAME',
                            'S0801_C01_001E', 'S0801_C01_009E']]
    commuters_df.columns = ['GEO_ID', 'NAME',
                           'total_workers', 'workers_using_transit']
    commuters_df = commuters_df.loc[1:len(commuters_df),:]
    commuters_df['GEO_ID'] = commuters_df['GEO_ID'].str[-11:]

    # Repeat for s1902
    households_df = s1902_df[['GEO_ID', 'NAME', 'S1902_C01_001E',
                             'S1902_C03_001E', 'S1902_C02_008E',
                             'S1902_C02_020E', 'S1902_C02_021E']]
    households_df.columns = ['GEO_ID', 'NAME', 'total_households',
                            'mean_income', 'percent_w_assistance',
                            'percent_white', 'percent_black_or_african_american']
    households_df = households_df.loc[1:len(households_df),:]
    households_df['GEO_ID'] = households_df['GEO_ID'].str[-11:]

    # Combine datasets on their census tract ID and write to .csv file
    final_df = pd.merge(commuters_df, households_df, on='GEO_ID').drop(columns=['NAME_x', 'NAME_y'])
    final_df.to_csv(f"{tract_shapes_path}_tmp.csv", index=False)
    return 1


def generate_folium_map(segment_file, census_file, colormap):
    """Draws together speed/socioeconomic data to create a Folium map.

    Loads segments with speed data, combined census data, and the colormap
    generated from the list of speeds to be plotted. Plots all data sources on
    a new Folium Map object centered on Seattle, and returns the map.
    
    Args:
        segment_file: A string path to the geojson file generated by
            write_speeds_to_map_segments that should contain geometry as well
            as speed data.
        census_file: A string path to the geojson file generated by
            write_census_data_to_csv that should contain the combined s0801 and
            s1902 tables.
        colormap: A Colormap object that describes what speeds should be mapped
            to what colors.

    Returns:
        A Folium Map object containing the most up-to-date speed data from the
        dynamodb.
    """
    # Read in route shapefile and give it the style function above
    kcm_routes = folium.GeoJson(f"{segment_file}_w_speeds_tmp.geojson",
                               style_function=lambda feature: {
                                   'color': colormap(feature['properties']['AVG_SPEED_M_S']),
                                   'weight': 2})
    # Read in the census data/shapefile and create a choropleth based on income
    seattle_tracts_df = pd.read_csv(f"{census_file}_tmp.csv")
    seattle_tracts_df['GEO_ID'] = seattle_tracts_df['GEO_ID'].astype(str)
    seattle_tracts_df['mean_income'] = pd.to_numeric(seattle_tracts_df['mean_income'], errors='coerce')
    seattle_tracts_df = seattle_tracts_df.dropna()
    seattle_tracts = folium.Choropleth(geo_data=f"{census_file}.geojson",
                                      name='Socioeconomic Data',
                                      data=seattle_tracts_df,
                                      columns=['GEO_ID', 'mean_income'],
                                      key_on='feature.properties.GEOID10',
                                      fill_color='PuBu',
                                      fill_opacity=0.7,
                                      line_opacity=0.4,
                                      legend_name='mean income')
    # Draw map using the speeds and census data
    m = folium.Map(location=[47.606209, -122.332069],
                  zoom_start=11,
                  prefer_canvas=True)
    seattle_tracts.add_to(m)
    kcm_routes.add_to(m)
    colormap.caption = 'Average Speed (m/s)'
    colormap.add_to(m)
    folium.LayerControl().add_to(m)
    return m

def save_and_view_map(f_map, output_file):
    """Writes Folium Map to an output file and prints the path to the terminal.

    Saves the specified Folium Map to the specified location. File is saved as
    an .html file. The user can then open the path in any browser to display 
    it.
    
    Args:
        f_map: A Folium Map object to be written.
        output_file: A string path to the location where the Folium Map should
            be saved. Do not include file type ending (.html).

    Returns:
        1 when done writing and printing the Folium map .html file.
    """
    f_map.save(f"{output_file}.html")
    current_directory = os.getcwd()
    print("Map saved, please copy this file path into any browser: "+\
          "file://"+
          current_directory+'/'+\
          f"{output_file}.html")
    return 1